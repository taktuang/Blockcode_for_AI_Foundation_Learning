{
  "importlib": [
    {
      "namelib": "",
      "title": "",
      "elements": {
        "code1": "",
        "code2": "",
        "code3": "",
        "code4": "",
        "code5": "",
        "code6": "",
        "code7": "",
        "code8": "",
        "code9": "",
        "code10": "",
        "code11": "",
        "code12": "",
        "code13": "",
        "code14": "",
        "code15": "",
        "comment1": "",
        "comment2": "",
        "comment3": "",
        "comment4": "",
        "comment5": "",
        "comment6": "",
        "comment7": ""
      }
    },
    {
      "namelib": "None",
      "title": "",
      "elements": {
        "code1": "",
        "code2": "",
        "code3": "",
        "code4": "",
        "code5": "",
        "code6": "",
        "code7": "",
        "code8": "",
        "code9": "",
        "code10": "",
        "code11": "",
        "code12": "",
        "code13": "",
        "code14": "",
        "code15": "",
        "comment1": "",
        "comment2": "",
        "comment3": "",
        "comment4": "",
        "comment5": "",
        "comment6": "",
        "comment7": ""
      }
    },
    {
      "namelib": "Model",
      "title": "",
      "elements": {
        "code1": "fnews_df = df",
        "code2": "X_train, X_test, y_train, y_test = train_test_split(news_df['utterance'], news_df['intent'], test_size=0.1, random_state=42)",
        "code3": "pipeline = Pipeline([",
        "code4": "    ('vect', CountVectorizer()),",
        "code5": "    ('tfidf', TfidfTransformer()),",
        "code6": "    ('clf', LogisticRegression()),",
        "code7": "])",
        "code8": "pipeline.fit(X_train, y_train)",
        "code9": "y_pred = pipeline.predict(X_test)",
        "code10": "accuracy = accuracy_score(y_test, y_pred)",
        "code11": "conf_matrix = confusion_matrix(y_test, y_pred)",
        "code12": "class_report = classification_report(y_test, y_pred)",
        "code13": "print(f'Accuracy: {accuracy}')",
        "code14": "print(f'Confusion matrix: {conf_matrix}')",
        "code15": "print(f'Classification report: {class_report}')",
        "comment1": "# Load the dataset",
        "comment2": "# Split the data into training and test sets",
        "comment3": "# Create a pipeline that extracts features from the text, applies a TF-IDF transformer,",
        "comment4": "# and trains a logistic regression model",
        "comment5": "# Train the model",
        "comment6": "# Test the model",
        "comment7": "# Evaluate the model"
      }
    },
    {
      "namelib": "Load data set",
      "title": "",
      "elements": {
        "code1": "fnews_df = df",
        "code2": "",
        "code3": "",
        "code4": "",
        "code5": "",
        "code6": "",
        "code7": "",
        "code8": "",
        "code9": "",
        "code10": "",
        "code11": "",
        "code12": "",
        "code13": "",
        "code14": "",
        "code15": "",
        "comment1": "# Load the dataset",
        "comment2": "",
        "comment3": "",
        "comment4": "",
        "comment5": "",
        "comment6": "",
        "comment7": ""
      }
    },
    {
      "namelib": "Split the data",
      "title": "",
      "elements": {
        "code1": "X_train, X_test, y_train, y_test = train_test_split(news_df['utterance'], news_df['intent'], test_size=0.1, random_state=42)",
        "code2": "",
        "code3": "",
        "code4": "",
        "code5": "",
        "code6": "",
        "code7": "",
        "code8": "",
        "code9": "",
        "code10": "",
        "code11": "",
        "code12": "",
        "code13": "",
        "code14": "",
        "code15": "",
        "comment1": "# Split the data into training and test sets",
        "comment2": "",
        "comment3": "",
        "comment4": "",
        "comment5": "",
        "comment6": "",
        "comment7": ""
      }
    },
    {
      "namelib": "Create a pipeline",
      "title": "",
      "elements": {
        "code1": "pipeline = Pipeline([",
        "code2": "    ('vect', CountVectorizer()),",
        "code3": "    ('tfidf', TfidfTransformer()),",
        "code4": "    ('clf', LogisticRegression()),",
        "code5": "])",
        "code6": "",
        "code7": "",
        "code8": "",
        "code9": "",
        "code10": "",
        "code11": "",
        "code12": "",
        "code13": "",
        "code14": "",
        "code15": "",
        "comment1": "# Create a pipeline that extracts features from the text, applies a TF-IDF transformer, and trains a logistic regression model",
        "comment2": "",
        "comment3": "",
        "comment4": "",
        "comment5": "",
        "comment6": "",
        "comment7": ""
      }
    },
    {
      "namelib": "Train the model",
      "title": "",
      "elements": {
        "code1": "pipeline.fit(X_train, y_train)",
        "code2": "",
        "code3": "",
        "code4": "",
        "code5": "",
        "code6": "",
        "code7": "",
        "code8": "",
        "code9": "",
        "code10": "",
        "code11": "",
        "code12": "",
        "code13": "",
        "code14": "",
        "code15": "",
        "comment1": "# Train the model",
        "comment2": "",
        "comment3": "",
        "comment4": "",
        "comment5": "",
        "comment6": "",
        "comment7": ""
      }
    },
    {
      "namelib": "Test the model",
      "title": "",
      "elements": {
        "code1": "y_pred = pipeline.predict(X_test)",
        "code2": "",
        "code3": "",
        "code4": "",
        "code5": "",
        "code6": "",
        "code7": "",
        "code8": "",
        "code9": "",
        "code10": "",
        "code11": "",
        "code12": "",
        "code13": "",
        "code14": "",
        "code15": "",
        "comment1": "# Test the model",
        "comment2": "",
        "comment3": "",
        "comment4": "",
        "comment5": "",
        "comment6": "",
        "comment7": ""
      }
    },
    {
      "namelib": "Evaluate the model",
      "title": "",
      "elements": {
        "code1": "accuracy = accuracy_score(y_test, y_pred)",
        "code2": "conf_matrix = confusion_matrix(y_test, y_pred)",
        "code3": "class_report = classification_report(y_test, y_pred)",
        "code4": "print(f'Accuracy: {accuracy}')",
        "code5": "print(f'Confusion matrix: {conf_matrix}')",
        "code6": "print(f'Classification report: {class_report}')",
        "code7": "",
        "code8": "",
        "code9": "",
        "code10": "",
        "code11": "",
        "code12": "",
        "code13": "",
        "code14": "",
        "code15": "",
        "comment1": "# Evaluate the model",
        "comment2": "",
        "comment3": "",
        "comment4": "",
        "comment5": "",
        "comment6": "",
        "comment7": ""
      }
    }
  ]
}
